---
- name: Check if Docker is installed (Ubuntu)
  stat: 
    path: "/usr/bin/docker"
  register: docker_check
- name: Skipping Docker (Ubuntu)
  debug:
    msg: "Docker is already installed. Skipping this tasklist."
  when: docker_check.stat.exists
- name: Install Docker (Ubuntu)
  block:
  - name: Create staging directory (Ubuntu)
    tempfile:
      state: directory
      suffix: '_docker'
    register: docker_staging_dir
  - name: Download Docker GPG Key (Ubuntu)
    get_url:
      url: "{{ docker.gpg.url }}"
      dest: "{{ docker_staging_dir.path }}/gpg"
  - name: Add Docker GPGP Key (Ubuntu)
    apt_key:
      file: "{{ docker_staging_dir.path }}/gpg"
  - name: Add Docker Repo (Ubuntu)
    apt_repository:
      repo: "{{ docker.repo.archive_type }} {{ docker.repo.url }} {{ ansible_distribution_release }} {{ docker.repo.components | join(' ') }}"
  - name: Update Package List (Ubuntu)
    apt:
      update_cache: yes
  - name: Install Docker (Ubuntu)
    apt:
      name: "{{ docker.pkg.name }}"
  always:
  - name: Clean up staging directory (Ubuntu)
    file:
      path: "{{ docker_staging_dir.path }}"
      state: absent
  when: not docker_check.stat.exists
  become: yes
- name: Docker Post-Install (Ubuntu)
  block:
  - name: Add Docker Group (Ubuntu)
    group:
      name: "{{ docker.group.name }}"
      state: present
  - name: Checking managed_user (Ubuntu)
    fail:
      msg: 'managed_user variable was not set. You can set this by running the playbook with the --extra-vars option.'
    when: managed_user is not defined
  - name: Adding managed_user to Docker Group (Ubuntu)
    user:
      groups: "{{ docker.group.name }}"
      append: yes
      name: "{{ managed_user }}"
